openapi: 3.0.0
info:
  title: Test API
  description: A simple test API for testing multi-YAML Swagger UI setup
  version: 1.0.0
  contact:
    name: Test Team
    email: test@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.test.com/v1
    description: Production server
  - url: https://staging-api.test.com/v1
    description: Staging server

paths:
  /users:
    get:
      summary: Get all users
      description: Retrieve a list of all users
      tags:
        - Users
      parameters:
        - name: limit
          in: query
          description: Number of users to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: offset
          in: query
          description: Number of users to skip
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  total:
                    type: integer
                    example: 150
        '400':
          description: Bad request
        '500':
          description: Internal server error
    post:
      summary: Create a new user
      description: Create a new user account
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
        '409':
          description: User already exists

  /users/{userId}:
    get:
      summary: Get user by ID
      description: Retrieve a specific user by their ID
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          description: The user ID
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    put:
      summary: Update user
      description: Update an existing user
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          description: The user ID
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '400':
          description: Bad request
    delete:
      summary: Delete user
      description: Delete a user account
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          description: The user ID
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found

  /posts:
    get:
      summary: Get all posts
      description: Retrieve a list of all posts
      tags:
        - Posts
      parameters:
        - name: author
          in: query
          description: Filter posts by author ID
          required: false
          schema:
            type: integer
        - name: category
          in: query
          description: Filter posts by category
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
    post:
      summary: Create a new post
      description: Create a new blog post
      tags:
        - Posts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostRequest'
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Bad request

  /posts/{postId}:
    get:
      summary: Get post by ID
      description: Retrieve a specific post by its ID
      tags:
        - Posts
      parameters:
        - name: postId
          in: path
          required: true
          description: The post ID
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: Post not found

  /health:
    get:
      summary: Health check
      description: Check the health status of the API
      tags:
        - System
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2024-01-15T10:30:00Z"
                  version:
                    type: string
                    example: "1.0.0"

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          example: "johndoe"
        email:
          type: string
          format: email
          example: "john@example.com"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        isActive:
          type: boolean
          example: true
      required:
        - id
        - username
        - email

    CreateUserRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          example: "johndoe"
        email:
          type: string
          format: email
          example: "john@example.com"
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          example: "John"
        lastName:
          type: string
          minLength: 1
          maxLength: 50
          example: "Doe"
        password:
          type: string
          minLength: 8
          example: "secretpassword123"
      required:
        - username
        - email
        - firstName
        - lastName
        - password

    UpdateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          example: "John"
        lastName:
          type: string
          minLength: 1
          maxLength: 50
          example: "Doe"
        isActive:
          type: boolean
          example: true

    Post:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: "My First Blog Post"
        content:
          type: string
          example: "This is the content of my first blog post..."
        authorId:
          type: integer
          format: int64
          example: 1
        category:
          type: string
          example: "technology"
        tags:
          type: array
          items:
            type: string
          example: ["tech", "programming", "api"]
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        published:
          type: boolean
          example: true
      required:
        - id
        - title
        - content
        - authorId

    CreatePostRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
          example: "My First Blog Post"
        content:
          type: string
          minLength: 1
          example: "This is the content of my first blog post..."
        category:
          type: string
          example: "technology"
        tags:
          type: array
          items:
            type: string
          example: ["tech", "programming", "api"]
        published:
          type: boolean
          default: false
          example: true
      required:
        - title
        - content

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []

tags:
  - name: Users
    description: User management operations
  - name: Posts
    description: Blog post operations
  - name: System
    description: System and health check operations
